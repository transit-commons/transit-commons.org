name: PR Preview

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]

permissions:
  issues: write
  pull-requests: write
  actions: write
  contents: read

jobs:
  preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base
          fetch-depth: 0

      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          path: pr
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          cd pr
          echo "files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '^src/.*\.md$\|^src/_includes/.*\.njk$\|^src/assets/.*\.css$' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (base)
        run: |
          cd base
          npm ci

      - name: Install dependencies (PR)
        run: |
          cd pr
          npm ci

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install Puppeteer
        run: npm install puppeteer-core

      - name: Build sites and capture screenshots
        uses: actions/github-script@v7
        with:
          script: |
            const puppeteer = require('puppeteer-core');
            const fs = require('fs');
            const path = require('path');

            // Parse changed files
            const changedFiles = JSON.parse('${{ steps.changed-files.outputs.files }}' || '[]');
            console.log('Changed files:', changedFiles);

            if (changedFiles.length === 0) {
              console.log('No relevant file changes detected');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '## Visual Changes\n\nNo changes to content pages, templates, or styles were detected in this PR.'
              });
              return;
            }

            // Get pages to screenshot
            const pagesToCapture = new Set();

            // Check for template/style changes that affect all pages
            const shouldCaptureHomepage = changedFiles.some(file =>
              file.includes('base.njk') || file.includes('styles.css')
            );
            if (shouldCaptureHomepage) {
              console.log('Template or style changes detected - will capture homepage');
              pagesToCapture.add('/');
            }

            // Add changed content pages
            changedFiles.forEach(file => {
              if (file.endsWith('.md')) {
                const route = file.replace(/^src/, '').replace(/\.md$/, '/');
                console.log(`Content change detected - will capture ${route}`);
                pagesToCapture.add(route);
              }
            });

            if (pagesToCapture.size === 0) {
              console.log('No pages need to be captured');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '## Visual Changes\n\nThe changes in this PR do not affect the visual appearance of any pages.'
              });
              return;
            }

            // Start servers with output logging
            console.log('Starting development servers...');
            const { spawn } = require('child_process');

            const baseServer = spawn('npm', ['start'], { cwd: 'base', detached: true });
            const prServer = spawn('npm', ['start'], { cwd: 'pr', detached: true });

            const servers = [baseServer, prServer];
            servers.forEach((server, i) => {
              const prefix = i === 0 ? 'Base' : 'PR';
              server.stdout.on('data', (data) => console.log(`${prefix} server: ${data}`));
              server.stderr.on('data', (data) => console.error(`${prefix} server error: ${data}`));
              server.on('exit', (code) => console.log(`${prefix} server exited with code ${code}`));
            });

            // Function to kill servers
            const cleanup = () => {
              console.log('Cleaning up servers...');
              servers.forEach(server => {
                try {
                  if (!server.killed) {
                    process.kill(-server.pid); // Kill entire process group
                    console.log(`Killed process group ${server.pid}`);
                  }
                } catch (err) {
                  console.error(`Error killing server: ${err}`);
                }
              });
            };

            // Wait for servers to start
            console.log('Waiting for servers to initialize...');
            await new Promise(resolve => setTimeout(resolve, 5000));
            console.log('Servers should be ready');

            // Create screenshots directory
            fs.mkdirSync('screenshots', { recursive: true });

            // Ensure screenshot paths exist
            const getScreenshotPath = (type, route) => {
              const dir = path.join('screenshots', type);
              fs.mkdirSync(dir, { recursive: true });

              // Convert root path to 'home'
              const filename = route === '/' ? `home.png` : `${route.replace(/\/$/, '')}.png`;
              // Store the path relative to the screenshots directory for artifact upload
              return {
                fullPath: path.join(dir, filename),
                relativePath: path.join(type, filename)
              };
            };

            // Take screenshots
            console.log('Launching Chrome...');
            const browser = await puppeteer.launch({
              executablePath: await io.which('chrome'),
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            console.log('Creating new page...');
            const page = await browser.newPage();
            await page.setViewport({ width: 1200, height: 800 });
            console.log('Browser ready for screenshots');

            try {
              const screenshots = [];
              console.log('Pages to capture:', Array.from(pagesToCapture));

              try {
                for (const route of pagesToCapture) {
                  try {
                    // Capture base version
                    console.log(`Navigating to base version of ${route}...`);
                    await page.goto(`http://localhost:8080${route}`, { waitUntil: 'networkidle0', timeout: 30000 });
                    console.log('Taking base screenshot...');
                    const { fullPath: baseFullPath, relativePath: baseRelPath } = getScreenshotPath('base', route);
                    await page.screenshot({ path: baseFullPath });
                    console.log(`Saved base screenshot to ${baseFullPath}`);

                    // Capture PR version
                    console.log(`Navigating to PR version of ${route}...`);
                    await page.goto(`http://localhost:8081${route}`, { waitUntil: 'networkidle0', timeout: 30000 });
                    console.log('Taking PR screenshot...');
                    const { fullPath: prFullPath, relativePath: prRelPath } = getScreenshotPath('pr', route);
                    await page.screenshot({ path: prFullPath });
                    console.log(`Saved PR screenshot to ${prFullPath}`);

                    // Record screenshot info
                    screenshots.push({
                      route,
                      pageName: route === '/' ? 'Homepage' : route.replace(/\//g, ' ').trim(),
                      baseScreenshot: baseRelPath,
                      prScreenshot: prRelPath
                    });
                  } catch (pageError) {
                    console.error(`Error capturing screenshots for ${route}:`, pageError);
                  }
                }

                console.log('Closing browser...');
                await browser.close();
                console.log('Browser closed');

                // Save screenshot info
                fs.writeFileSync('screenshots.json', JSON.stringify(screenshots, null, 2));
              } catch (err) {
                console.error('Error in screenshot process:', err);
                process.exit(1);
              }
            } finally {
              cleanup();
              process.exit(0);
            }

      ## TODO: push screenshots to a git branch instead of using artifact
      # See: https://stackoverflow.com/questions/41581151/how-to-upload-an-image-to-use-in-issue-comments-via-github-api
      # See: https://github.com/takahirom/roborazzi-compare-on-github-comment-sample/blob/main/.github%2Fworkflows%2FCompareScreenshotComment.yml
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        with:
          name: preview-screenshots
          path: screenshots/**/*.png
          if-no-files-found: error

      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              // Check if screenshots.json exists
              if (!fs.existsSync('screenshots.json')) {
                console.log('No screenshots.json found - the screenshot step may have failed');
                return;
              }

              // Read screenshot info
              let screenshots;
              try {
                screenshots = JSON.parse(fs.readFileSync('screenshots.json', 'utf8'));
              } catch (error) {
                console.error('Error reading screenshots.json:', error);
                return;
              }

              if (!Array.isArray(screenshots) || screenshots.length === 0) {
                console.log('No screenshots were captured');
                return;
              }

              // Get artifact URL
              const { data: { artifacts } } = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
              });

              const previewArtifact = artifacts.find(a => a.name === 'preview-screenshots');
              if (!previewArtifact) {
                console.log('No preview screenshots artifact found');
                return;
              }

              // Build comment with artifact URLs
              let comment = '## Visual Changes\n\n';
              const artifactUrl = `${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/suites/${context.runId}/artifacts/${previewArtifact.id}`;

              for (const screenshot of screenshots) {
                comment += `### ${screenshot.pageName}\n`;
                comment += '<table><tr><td>Before</td><td>After</td></tr>\n';
                comment += '<tr>';
                comment += `<td><img src="${artifactUrl}/screenshots/${screenshot.baseScreenshot}" width="600"></td>`;
                comment += `<td><img src="${artifactUrl}/screenshots/${screenshot.prScreenshot}" width="600"></td>`;
                comment += '</tr></table>\n\n';
              }

              // Post comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            } catch (error) {
              console.error('Error in post-screenshot process:', error);
              process.exit(1);
            }
